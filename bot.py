import os
import asyncio
import logging
import aiosqlite
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_URL = os.environ["WEBHOOK_URL"]
DB_FILE = "/tmp/users.db"  # Railway: /tmp —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ (—á–∞—Å—Ç–∏—á–Ω–æ)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!)
#BOT_TOKEN = "8265553695:AAE9BLJhMSQZQgY4vYRSHw-FN1Zpwp4IpVo"

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#DB_FILE = "users.db"

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
#CHECK_INTERVAL = 10

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                notification_status TEXT DEFAULT '–æ–∂–∏–¥–∞–Ω–∏–µ'
            )
        """)
        await db.commit()

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π user_id
ADMIN_USER_ID = os.environ["ADMIN_USER_ID"]
#ADMIN_USER_ID = 1114301601  # ‚Üê –í–ê–® ID –∑–¥–µ—Å—å

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("UsageId: /delete_user <user_id>")
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("DELETE FROM users WHERE user_id = ?", (target_user_id,))
        await db.commit()
        if cursor.rowcount > 0:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def add_or_update_user(user_id: int, username: str):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            INSERT INTO users (user_id, username, notification_status)
            VALUES (?, ?, '–æ–∂–∏–¥–∞–Ω–∏–µ')
            ON CONFLICT(user_id) DO UPDATE SET username = excluded.username
        """, (user_id, username))
        await db.commit()

async def get_users_to_notify():
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("""
            SELECT user_id FROM users WHERE notification_status = '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å'
        """)
        rows = await cursor.fetchall()
        return [row[0] for row in rows]

async def mark_notified(user_id: int):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            UPDATE users SET notification_status = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
            WHERE user_id = ?
        """, (user_id,))
        await db.commit()

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return

    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT user_id, username, notification_status FROM users")
        rows = await cursor.fetchall()

    if not rows:
        await update.message.reply_text("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, username, status in rows:
        name = username or f"user{user_id}"
        text += f"ID: {user_id} | @{name} | {status}\n"

    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º
    await update.message.reply_text(text[:4000])  # –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_or_update_user(user.id, user.username or user.first_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. "
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî —è –ø—Ä–∏—à–ª—é –µ–≥–æ."
    )

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===

async def notify_users(context: ContextTypes.DEFAULT_TYPE):
    user_ids = await get_users_to_notify()
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text="üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
            await mark_notified(user_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===

# async def main():
#     await init_db()

#     app = Application.builder().token(BOT_TOKEN).build()

#     # –ö–æ–º–∞–Ω–¥–∞ /start
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("delete_user", delete_user))
#     app.add_handler(CommandHandler("list_users", list_users))

#     # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥
#     job_queue = app.job_queue
#     job_queue.run_repeating(notify_users, interval=CHECK_INTERVAL, first=1)

#     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#     await app.initialize()
#     await app.start()
#     await app.updater.start_polling()

#     # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#     try:
#         await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
#     finally:
#         await app.updater.stop()
#         await app.stop()
#         await app.shutdown()

# if __name__ == "__main__":
#     asyncio.run(main())

async def main():
    await init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("delete_user", delete_user))
    app.add_handler(CommandHandler("list_users", list_users))
    await app.bot.set_webhook(url=WEBHOOK_URL)
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8000)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    asyncio.run(main())